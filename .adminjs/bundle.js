(function (designSystem, React) {
	'use strict';

	function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

	var React__default = /*#__PURE__*/_interopDefault(React);

	const ImageUploader = ({
	  onChange
	}) => {
	  const handleUpload = React.useCallback(async files => {
	    onChange("name", "");
	    onChange("contentType", "");
	    onChange("bucketId", "");
	    const [file] = files;
	    const formData = new FormData();
	    formData.append("image", file);
	    const res = await fetch("/image-upload", {
	      method: "POST",
	      body: formData
	    }).then(res => res.json());
	    if (res.id) {
	      onChange("name", file.name);
	      onChange("contentType", file.type);
	      onChange("bucketId", res.id);
	    }
	  }, [onChange]);
	  return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.DropZone, {
	    validate: {
	      mimeTypes: ["image/jpeg", "image/png"]
	    },
	    onChange: files => handleUpload(files)
	  }));
	};

	const ImageShow = ({
	  record
	}) => {
	  const [image, setImage] = React.useState({});
	  React.useEffect(() => {
	    const getImage = async id => {
	      const data = await fetch(`/image/${id}`).then(res => res.json());
	      console.log(data);
	      setImage({
	        ...data,
	        data: `data:${data.contentType};base64,${data.data}`
	      });
	    };
	    if (record?.params?._id) {
	      getImage(record.params._id);
	    }
	  }, [record?.params?._id]);
	  return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement("img", {
	    src: image?.data,
	    alt: "Image",
	    style: {
	      maxWidth: 120
	    }
	  }));
	};

	AdminJS.UserComponents = {};
	AdminJS.UserComponents.ImageUploader = ImageUploader;
	AdminJS.UserComponents.ImageShow = ImageShow;

})(AdminJSDesignSystem, React);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvY29tcG9uZW50cy9JbWFnZVVwbG9hZGVyLmpzeCIsIi4uL3NyYy9jb21wb25lbnRzL0ltYWdlU2hvdy5qc3giLCJlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3gsIERyb3Bab25lIH0gZnJvbSBcIkBhZG1pbmpzL2Rlc2lnbi1zeXN0ZW1cIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBJbWFnZVVwbG9hZGVyID0gKHsgb25DaGFuZ2UgfSkgPT4ge1xuXHRjb25zdCBoYW5kbGVVcGxvYWQgPSB1c2VDYWxsYmFjayhcblx0XHRhc3luYyAoZmlsZXMpID0+IHtcblx0XHRcdG9uQ2hhbmdlKFwibmFtZVwiLCBcIlwiKTtcblx0XHRcdG9uQ2hhbmdlKFwiY29udGVudFR5cGVcIiwgXCJcIik7XG5cdFx0XHRvbkNoYW5nZShcImJ1Y2tldElkXCIsIFwiXCIpO1xuXHRcdFx0Y29uc3QgW2ZpbGVdID0gZmlsZXM7XG5cdFx0XHRjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXHRcdFx0Zm9ybURhdGEuYXBwZW5kKFwiaW1hZ2VcIiwgZmlsZSk7XG5cblx0XHRcdGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFwiL2ltYWdlLXVwbG9hZFwiLCB7XG5cdFx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRcdGJvZHk6IGZvcm1EYXRhLFxuXHRcdFx0fSkudGhlbigocmVzKSA9PiByZXMuanNvbigpKTtcblxuXHRcdFx0aWYgKHJlcy5pZCkge1xuXHRcdFx0XHRvbkNoYW5nZShcIm5hbWVcIiwgZmlsZS5uYW1lKTtcblx0XHRcdFx0b25DaGFuZ2UoXCJjb250ZW50VHlwZVwiLCBmaWxlLnR5cGUpO1xuXHRcdFx0XHRvbkNoYW5nZShcImJ1Y2tldElkXCIsIHJlcy5pZCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRbb25DaGFuZ2VdXG5cdCk7XG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdDxEcm9wWm9uZVxuXHRcdFx0XHR2YWxpZGF0ZT17e1xuXHRcdFx0XHRcdG1pbWVUeXBlczogW1wiaW1hZ2UvanBlZ1wiLCBcImltYWdlL3BuZ1wiXSxcblx0XHRcdFx0fX1cblx0XHRcdFx0b25DaGFuZ2U9eyhmaWxlcykgPT4gaGFuZGxlVXBsb2FkKGZpbGVzKX1cblx0XHRcdC8+XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbWFnZVVwbG9hZGVyO1xuIiwiaW1wb3J0IHsgQm94LCBMYWJlbCB9IGZyb20gXCJAYWRtaW5qcy9kZXNpZ24tc3lzdGVtXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBJbWFnZVNob3cgPSAoeyByZWNvcmQgfSkgPT4ge1xuXHRjb25zdCBbaW1hZ2UsIHNldEltYWdlXSA9IHVzZVN0YXRlKHt9KTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IGdldEltYWdlID0gYXN5bmMgKGlkKSA9PiB7XG5cdFx0XHRjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2goYC9pbWFnZS8ke2lkfWApLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSk7XG5cblx0XHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXG5cdFx0XHRzZXRJbWFnZSh7IC4uLmRhdGEsIGRhdGE6IGBkYXRhOiR7ZGF0YS5jb250ZW50VHlwZX07YmFzZTY0LCR7ZGF0YS5kYXRhfWAgfSk7XG5cdFx0fTtcblx0XHRpZiAocmVjb3JkPy5wYXJhbXM/Ll9pZCkge1xuXHRcdFx0Z2V0SW1hZ2UocmVjb3JkLnBhcmFtcy5faWQpO1xuXHRcdH1cblx0fSwgW3JlY29yZD8ucGFyYW1zPy5faWRdKTtcblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0PGltZyBzcmM9e2ltYWdlPy5kYXRhfSBhbHQ9XCJJbWFnZVwiIHN0eWxlPXt7IG1heFdpZHRoOiAxMjAgfX0gLz5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlU2hvdztcbiIsIkFkbWluSlMuVXNlckNvbXBvbmVudHMgPSB7fVxuaW1wb3J0IEltYWdlVXBsb2FkZXIgZnJvbSAnLi4vc3JjL2NvbXBvbmVudHMvSW1hZ2VVcGxvYWRlcidcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuSW1hZ2VVcGxvYWRlciA9IEltYWdlVXBsb2FkZXJcbmltcG9ydCBJbWFnZVNob3cgZnJvbSAnLi4vc3JjL2NvbXBvbmVudHMvSW1hZ2VTaG93J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5JbWFnZVNob3cgPSBJbWFnZVNob3ciXSwibmFtZXMiOlsiSW1hZ2VVcGxvYWRlciIsIm9uQ2hhbmdlIiwiaGFuZGxlVXBsb2FkIiwidXNlQ2FsbGJhY2siLCJmaWxlcyIsImZpbGUiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwicmVzIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwidGhlbiIsImpzb24iLCJpZCIsIm5hbWUiLCJ0eXBlIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiQm94IiwiRHJvcFpvbmUiLCJ2YWxpZGF0ZSIsIm1pbWVUeXBlcyIsIkltYWdlU2hvdyIsInJlY29yZCIsImltYWdlIiwic2V0SW1hZ2UiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImdldEltYWdlIiwiZGF0YSIsImNvbnNvbGUiLCJsb2ciLCJjb250ZW50VHlwZSIsInBhcmFtcyIsIl9pZCIsInNyYyIsImFsdCIsInN0eWxlIiwibWF4V2lkdGgiLCJBZG1pbkpTIiwiVXNlckNvbXBvbmVudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Q0FHQSxNQUFNQSxhQUFhLEdBQUdBLENBQUM7Q0FBRUMsRUFBQUEsUUFBQUE7Q0FBUyxDQUFDLEtBQUs7Q0FDdkMsRUFBQSxNQUFNQyxZQUFZLEdBQUdDLGlCQUFXLENBQy9CLE1BQU9DLEtBQUssSUFBSztDQUNoQkgsSUFBQUEsUUFBUSxDQUFDLE1BQU0sRUFBRSxF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
